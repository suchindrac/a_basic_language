# Generated from BasicLang.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,142,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,
        12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,4,16,97,
        8,16,11,16,12,16,98,1,17,4,17,102,8,17,11,17,12,17,103,1,18,4,18,
        107,8,18,11,18,12,18,108,1,19,4,19,112,8,19,11,19,12,19,113,1,20,
        1,20,1,20,3,20,119,8,20,1,21,4,21,122,8,21,11,21,12,21,123,1,22,
        3,22,127,8,22,1,22,1,22,1,23,4,23,132,8,23,11,23,12,23,133,1,23,
        1,23,1,24,4,24,139,8,24,11,24,12,24,140,0,0,25,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,7,1,0,
        97,122,1,0,46,46,2,0,45,45,95,95,1,0,65,90,1,0,48,57,2,0,9,9,32,
        32,2,0,123,123,125,125,151,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,57,
        1,0,0,0,9,59,1,0,0,0,11,61,1,0,0,0,13,63,1,0,0,0,15,65,1,0,0,0,17,
        71,1,0,0,0,19,76,1,0,0,0,21,78,1,0,0,0,23,82,1,0,0,0,25,84,1,0,0,
        0,27,86,1,0,0,0,29,89,1,0,0,0,31,92,1,0,0,0,33,96,1,0,0,0,35,101,
        1,0,0,0,37,106,1,0,0,0,39,111,1,0,0,0,41,118,1,0,0,0,43,121,1,0,
        0,0,45,126,1,0,0,0,47,131,1,0,0,0,49,138,1,0,0,0,51,52,5,61,0,0,
        52,2,1,0,0,0,53,54,5,42,0,0,54,4,1,0,0,0,55,56,5,47,0,0,56,6,1,0,
        0,0,57,58,5,43,0,0,58,8,1,0,0,0,59,60,5,45,0,0,60,10,1,0,0,0,61,
        62,5,40,0,0,62,12,1,0,0,0,63,64,5,41,0,0,64,14,1,0,0,0,65,66,5,112,
        0,0,66,67,5,114,0,0,67,68,5,105,0,0,68,69,5,110,0,0,69,70,5,116,
        0,0,70,16,1,0,0,0,71,72,5,101,0,0,72,73,5,120,0,0,73,74,5,105,0,
        0,74,75,5,116,0,0,75,18,1,0,0,0,76,77,5,58,0,0,77,20,1,0,0,0,78,
        79,5,60,0,0,79,80,5,45,0,0,80,81,5,62,0,0,81,22,1,0,0,0,82,83,5,
        91,0,0,83,24,1,0,0,0,84,85,5,93,0,0,85,26,1,0,0,0,86,87,5,43,0,0,
        87,88,5,61,0,0,88,28,1,0,0,0,89,90,5,60,0,0,90,91,5,35,0,0,91,30,
        1,0,0,0,92,93,5,35,0,0,93,94,5,62,0,0,94,32,1,0,0,0,95,97,7,0,0,
        0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,34,
        1,0,0,0,100,102,7,1,0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,
        1,0,0,0,103,104,1,0,0,0,104,36,1,0,0,0,105,107,7,2,0,0,106,105,1,
        0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,38,1,0,
        0,0,110,112,7,3,0,0,111,110,1,0,0,0,112,113,1,0,0,0,113,111,1,0,
        0,0,113,114,1,0,0,0,114,40,1,0,0,0,115,119,3,33,16,0,116,119,3,35,
        17,0,117,119,3,37,18,0,118,115,1,0,0,0,118,116,1,0,0,0,118,117,1,
        0,0,0,119,42,1,0,0,0,120,122,7,4,0,0,121,120,1,0,0,0,122,123,1,0,
        0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,44,1,0,0,0,125,127,5,13,
        0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,5,10,
        0,0,129,46,1,0,0,0,130,132,7,5,0,0,131,130,1,0,0,0,132,133,1,0,0,
        0,133,131,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,6,23,0,
        0,136,48,1,0,0,0,137,139,7,6,0,0,138,137,1,0,0,0,139,140,1,0,0,0,
        140,138,1,0,0,0,140,141,1,0,0,0,141,50,1,0,0,0,10,0,98,103,108,113,
        118,123,126,133,140,1,6,0,0
    ]

class BasicLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    BSTART = 15
    BFIN = 16
    ID = 17
    DOT = 18
    DASH = 19
    CAPID = 20
    ANY = 21
    INT = 22
    NL = 23
    WS = 24
    BRACES = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'*'", "'/'", "'+'", "'-'", "'('", "')'", "'print'", 
            "'exit'", "':'", "'<->'", "'['", "']'", "'+='", "'<#'", "'#>'" ]

    symbolicNames = [ "<INVALID>",
            "BSTART", "BFIN", "ID", "DOT", "DASH", "CAPID", "ANY", "INT", 
            "NL", "WS", "BRACES" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "BSTART", "BFIN", "ID", "DOT", "DASH", "CAPID", "ANY", 
                  "INT", "NL", "WS", "BRACES" ]

    grammarFileName = "BasicLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


