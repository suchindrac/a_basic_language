# Generated from BasicLang.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,149,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,
        6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,
        1,15,1,16,1,16,1,16,1,17,4,17,104,8,17,11,17,12,17,105,1,18,4,18,
        109,8,18,11,18,12,18,110,1,19,4,19,114,8,19,11,19,12,19,115,1,20,
        4,20,119,8,20,11,20,12,20,120,1,21,1,21,1,21,3,21,126,8,21,1,22,
        4,22,129,8,22,11,22,12,22,130,1,23,3,23,134,8,23,1,23,1,23,1,24,
        4,24,139,8,24,11,24,12,24,140,1,24,1,24,1,25,4,25,146,8,25,11,25,
        12,25,147,0,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,1,0,7,1,0,97,122,1,0,46,46,2,0,45,45,
        95,95,1,0,65,90,1,0,48,57,2,0,9,9,32,32,2,0,123,123,125,125,158,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,1,53,1,0,0,0,3,58,1,0,0,0,5,60,1,0,0,0,7,62,1,0,0,0,9,64,
        1,0,0,0,11,66,1,0,0,0,13,68,1,0,0,0,15,70,1,0,0,0,17,72,1,0,0,0,
        19,78,1,0,0,0,21,83,1,0,0,0,23,85,1,0,0,0,25,89,1,0,0,0,27,91,1,
        0,0,0,29,93,1,0,0,0,31,96,1,0,0,0,33,99,1,0,0,0,35,103,1,0,0,0,37,
        108,1,0,0,0,39,113,1,0,0,0,41,118,1,0,0,0,43,125,1,0,0,0,45,128,
        1,0,0,0,47,133,1,0,0,0,49,138,1,0,0,0,51,145,1,0,0,0,53,54,5,101,
        0,0,54,55,5,120,0,0,55,56,5,101,0,0,56,57,5,99,0,0,57,2,1,0,0,0,
        58,59,5,61,0,0,59,4,1,0,0,0,60,61,5,42,0,0,61,6,1,0,0,0,62,63,5,
        47,0,0,63,8,1,0,0,0,64,65,5,43,0,0,65,10,1,0,0,0,66,67,5,45,0,0,
        67,12,1,0,0,0,68,69,5,40,0,0,69,14,1,0,0,0,70,71,5,41,0,0,71,16,
        1,0,0,0,72,73,5,112,0,0,73,74,5,114,0,0,74,75,5,105,0,0,75,76,5,
        110,0,0,76,77,5,116,0,0,77,18,1,0,0,0,78,79,5,101,0,0,79,80,5,120,
        0,0,80,81,5,105,0,0,81,82,5,116,0,0,82,20,1,0,0,0,83,84,5,58,0,0,
        84,22,1,0,0,0,85,86,5,60,0,0,86,87,5,45,0,0,87,88,5,62,0,0,88,24,
        1,0,0,0,89,90,5,91,0,0,90,26,1,0,0,0,91,92,5,93,0,0,92,28,1,0,0,
        0,93,94,5,43,0,0,94,95,5,61,0,0,95,30,1,0,0,0,96,97,5,60,0,0,97,
        98,5,35,0,0,98,32,1,0,0,0,99,100,5,35,0,0,100,101,5,62,0,0,101,34,
        1,0,0,0,102,104,7,0,0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,103,
        1,0,0,0,105,106,1,0,0,0,106,36,1,0,0,0,107,109,7,1,0,0,108,107,1,
        0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,38,1,0,
        0,0,112,114,7,2,0,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,
        0,0,115,116,1,0,0,0,116,40,1,0,0,0,117,119,7,3,0,0,118,117,1,0,0,
        0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,42,1,0,0,0,
        122,126,3,35,17,0,123,126,3,37,18,0,124,126,3,39,19,0,125,122,1,
        0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,44,1,0,0,0,127,129,7,4,
        0,0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,
        0,0,131,46,1,0,0,0,132,134,5,13,0,0,133,132,1,0,0,0,133,134,1,0,
        0,0,134,135,1,0,0,0,135,136,5,10,0,0,136,48,1,0,0,0,137,139,7,5,
        0,0,138,137,1,0,0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,
        0,0,141,142,1,0,0,0,142,143,6,24,0,0,143,50,1,0,0,0,144,146,7,6,
        0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,
        0,0,148,52,1,0,0,0,10,0,105,110,115,120,125,130,133,140,147,1,6,
        0,0
    ]

class BasicLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    BSTART = 16
    BFIN = 17
    ID = 18
    DOT = 19
    DASH = 20
    CAPID = 21
    ANY = 22
    INT = 23
    NL = 24
    WS = 25
    BRACES = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'exec'", "'='", "'*'", "'/'", "'+'", "'-'", "'('", "')'", "'print'", 
            "'exit'", "':'", "'<->'", "'['", "']'", "'+='", "'<#'", "'#>'" ]

    symbolicNames = [ "<INVALID>",
            "BSTART", "BFIN", "ID", "DOT", "DASH", "CAPID", "ANY", "INT", 
            "NL", "WS", "BRACES" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "BSTART", "BFIN", "ID", "DOT", "DASH", "CAPID", 
                  "ANY", "INT", "NL", "WS", "BRACES" ]

    grammarFileName = "BasicLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


