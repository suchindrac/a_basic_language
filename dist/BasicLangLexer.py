# Generated from BasicLang.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,
        1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,
        1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
        1,27,4,27,167,8,27,11,27,12,27,168,1,28,4,28,172,8,28,11,28,12,28,
        173,1,29,4,29,177,8,29,11,29,12,29,178,1,30,1,30,1,31,1,31,1,31,
        3,31,186,8,31,1,32,4,32,189,8,32,11,32,12,32,190,1,33,3,33,194,8,
        33,1,33,1,33,1,34,4,34,199,8,34,11,34,12,34,200,1,34,1,34,1,35,4,
        35,206,8,35,11,35,12,35,207,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,6,3,0,46,46,65,90,
        97,122,1,0,46,46,2,0,45,45,95,95,1,0,48,57,2,0,9,9,32,32,2,0,123,
        123,125,125,217,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,76,1,0,0,0,5,83,1,0,0,0,
        7,85,1,0,0,0,9,92,1,0,0,0,11,97,1,0,0,0,13,101,1,0,0,0,15,108,1,
        0,0,0,17,110,1,0,0,0,19,112,1,0,0,0,21,114,1,0,0,0,23,116,1,0,0,
        0,25,118,1,0,0,0,27,120,1,0,0,0,29,123,1,0,0,0,31,126,1,0,0,0,33,
        129,1,0,0,0,35,132,1,0,0,0,37,135,1,0,0,0,39,141,1,0,0,0,41,146,
        1,0,0,0,43,148,1,0,0,0,45,152,1,0,0,0,47,154,1,0,0,0,49,156,1,0,
        0,0,51,159,1,0,0,0,53,162,1,0,0,0,55,166,1,0,0,0,57,171,1,0,0,0,
        59,176,1,0,0,0,61,180,1,0,0,0,63,185,1,0,0,0,65,188,1,0,0,0,67,193,
        1,0,0,0,69,198,1,0,0,0,71,205,1,0,0,0,73,74,5,100,0,0,74,75,5,111,
        0,0,75,2,1,0,0,0,76,77,5,115,0,0,77,78,5,101,0,0,78,79,5,116,0,0,
        79,80,5,114,0,0,80,81,5,101,0,0,81,82,5,115,0,0,82,4,1,0,0,0,83,
        84,5,61,0,0,84,6,1,0,0,0,85,86,5,103,0,0,86,87,5,101,0,0,87,88,5,
        116,0,0,88,89,5,114,0,0,89,90,5,101,0,0,90,91,5,115,0,0,91,8,1,0,
        0,0,92,93,5,101,0,0,93,94,5,120,0,0,94,95,5,101,0,0,95,96,5,99,0,
        0,96,10,1,0,0,0,97,98,5,109,0,0,98,99,5,97,0,0,99,100,5,120,0,0,
        100,12,1,0,0,0,101,102,5,105,0,0,102,103,5,109,0,0,103,104,5,112,
        0,0,104,105,5,111,0,0,105,106,5,114,0,0,106,107,5,116,0,0,107,14,
        1,0,0,0,108,109,5,42,0,0,109,16,1,0,0,0,110,111,5,47,0,0,111,18,
        1,0,0,0,112,113,5,43,0,0,113,20,1,0,0,0,114,115,5,45,0,0,115,22,
        1,0,0,0,116,117,5,40,0,0,117,24,1,0,0,0,118,119,5,41,0,0,119,26,
        1,0,0,0,120,121,5,101,0,0,121,122,5,113,0,0,122,28,1,0,0,0,123,124,
        5,103,0,0,124,125,5,116,0,0,125,30,1,0,0,0,126,127,5,108,0,0,127,
        128,5,116,0,0,128,32,1,0,0,0,129,130,5,103,0,0,130,131,5,101,0,0,
        131,34,1,0,0,0,132,133,5,108,0,0,133,134,5,101,0,0,134,36,1,0,0,
        0,135,136,5,112,0,0,136,137,5,114,0,0,137,138,5,105,0,0,138,139,
        5,110,0,0,139,140,5,116,0,0,140,38,1,0,0,0,141,142,5,101,0,0,142,
        143,5,120,0,0,143,144,5,105,0,0,144,145,5,116,0,0,145,40,1,0,0,0,
        146,147,5,58,0,0,147,42,1,0,0,0,148,149,5,60,0,0,149,150,5,45,0,
        0,150,151,5,62,0,0,151,44,1,0,0,0,152,153,5,91,0,0,153,46,1,0,0,
        0,154,155,5,93,0,0,155,48,1,0,0,0,156,157,5,43,0,0,157,158,5,61,
        0,0,158,50,1,0,0,0,159,160,5,60,0,0,160,161,5,35,0,0,161,52,1,0,
        0,0,162,163,5,35,0,0,163,164,5,62,0,0,164,54,1,0,0,0,165,167,7,0,
        0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,166,1,0,0,0,168,169,1,0,
        0,0,169,56,1,0,0,0,170,172,7,1,0,0,171,170,1,0,0,0,172,173,1,0,0,
        0,173,171,1,0,0,0,173,174,1,0,0,0,174,58,1,0,0,0,175,177,7,2,0,0,
        176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,
        179,60,1,0,0,0,180,181,5,44,0,0,181,62,1,0,0,0,182,186,3,55,27,0,
        183,186,3,57,28,0,184,186,3,59,29,0,185,182,1,0,0,0,185,183,1,0,
        0,0,185,184,1,0,0,0,186,64,1,0,0,0,187,189,7,3,0,0,188,187,1,0,0,
        0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,66,1,0,0,0,
        192,194,5,13,0,0,193,192,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,
        195,196,5,10,0,0,196,68,1,0,0,0,197,199,7,4,0,0,198,197,1,0,0,0,
        199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,
        202,203,6,34,0,0,203,70,1,0,0,0,204,206,7,5,0,0,205,204,1,0,0,0,
        206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,72,1,0,0,0,9,
        0,168,173,178,185,190,193,200,207,1,6,0,0
    ]

class BasicLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    BSTART = 26
    BFIN = 27
    ID = 28
    DOT = 29
    DASH = 30
    COMMA = 31
    ANY = 32
    INT = 33
    NL = 34
    WS = 35
    BRACES = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'do'", "'setres'", "'='", "'getres'", "'exec'", "'max'", "'import'", 
            "'*'", "'/'", "'+'", "'-'", "'('", "')'", "'eq'", "'gt'", "'lt'", 
            "'ge'", "'le'", "'print'", "'exit'", "':'", "'<->'", "'['", 
            "']'", "'+='", "'<#'", "'#>'", "','" ]

    symbolicNames = [ "<INVALID>",
            "BSTART", "BFIN", "ID", "DOT", "DASH", "COMMA", "ANY", "INT", 
            "NL", "WS", "BRACES" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "BSTART", 
                  "BFIN", "ID", "DOT", "DASH", "COMMA", "ANY", "INT", "NL", 
                  "WS", "BRACES" ]

    grammarFileName = "BasicLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


