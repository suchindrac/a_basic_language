MAINBLOCK <#
print - creating alink as leftside <-> rightside
alink: leftside <-> rightside
print - creating blink as 1 <-> something
blink: 1 <-> something
print - creating clink as alink <-> blink
clink: alink <-> blink
print - printing link details
print clink is {clink}
print clink of alink is clink[alink]
print blink of 1 is blink[1]
print - changing blink
blink[1] = more
print printing blink:
print blink of 1 is blink[1]
print changing blink from right side
blink[more] = 5
print printing blink:
print blink of more is blink[more]
print - creating expression link:
alinke: left <-> (3+  4) *5
print - printing expression link
print {alinke}
print - changing expression link
alinke[left] = (5  +8)*  8
print - printing expression link
print {alinke}
print - appending to link
alinke[right] = more
print - printing the link
print {alinke}
print - appending to link using plus equal
alinke += new
print - printing the link
print {alinke}
print - creating an expression variable
avar = (3 +4) *5
print - printing the variable
print avar is {avar}
print - preating an integer variable:
bvar = 25
print - printing the variable:
print bvar is {bvar}
print - equating one variable to another
cvar = avar
print - printing equated variable:
print cvar is {cvar}
print - creating a string variable
dvar = something
print - printing the string variable:
print dvar is {dvar}
print - printing a number:
print 25
print - printing non existing variable:
print notexistingvar
print - variable arithmetic
a = 25
b = 50
c = a + b*25
print {c}
#>
