NEWBLOCK <#
print - creating alink as leftside <-> rightside
alink: leftside <-> rightside
print - creating blink as 1 <-> something
blink: 1 <-> something
print - creating clink as alink <-> blink
clink: alink <-> blink
print - printing link details
print clink is {clink}
print clink of alink is clink[alink]
print blink of 1 is blink[1]
print - changing blink
blink[1] = more
print printing blink:
print blink of 1 is blink[1]
print changing blink from right side
blink[more] = 5
print printing blink:
print blink of more is blink[more]
print - creating expression link:
alinke: left <-> (3+  4) *5
print - printing expression link
print {alinke}
print - changing expression link
alinke[left] = (5  +8)*  8
print - printing expression link
print {alinke}
print - appending to link
alinke[right] = more
print - printing the link
print {alinke}
print - appending to link using plus equal
alinke += new
print - printing the link
print {alinke}
print - creating an expression variable
avar = (3 +4) *5
print - printing the variable
print avar is {avar}
print - preating an integer variable:
bvar = 25
print - printing the variable:
print bvar is {bvar}
print - equating one variable to another
cvar = avar
print - printing equated variable:
print cvar is {cvar}
print - creating a string variable
dvar = something
print - printing the string variable:
print dvar is {dvar}
print - printing a number:
print 25
print - printing non existing variable:
print notexistingvar
#>

SOMEBLOCK <#
print something
#>

VERBLOCK <# print single line block output #>

MAINBLOCK <#
exec NEWBLOCK
exec SOMEBLOCK
exec VERBLOCK
#>

- creating alink as leftside <-> rightside
Link created
- creating blink as 1 <-> something
Link created
- creating clink as alink <-> blink
Link created
- printing link details
clink is leftside <-> rightside,  <-> 1 <-> something, , 
clink of alink is 1 <-> something, 
blink of 1 is something
- changing blink

printing blink:
blink of 1 is more
changing blink from right side

printing blink:
blink of more is 5
- creating expression link:
Link created
- printing expression link
left <-> 35, 
- changing expression link
Link modified
- printing expression link
left <-> 104, 
- appending to link

- printing the link
left <-> 104, right <-> more, 
- appending to link using plus equal

- printing the link
left <-> 104, right <-> more, 0 <-> new, 
- creating an expression variable
avar set to 35
- printing the variable
avar is 35
- preating an integer variable:
Set bvar to 25
- printing the variable:
bvar is 25
- equating one variable to another
Set cvar to 35
- printing equated variable:
cvar is 35
- creating a string variable
Set dvar to something
- printing the string variable:
dvar is something
- printing a number:
25
- printing non existing variable:
notexistingvar
something
single line block output

Output of script 2:
NEWBLK <#
alink: newword <-> 1
a = 25
print a
print {a}
#>

MAINBLOCK <#
exec NEWBLK
#>

Link created
Set a to 25
a
25

Output of script 3:
MAINBLOCK <#
import imported
exec SOMEBLOCK
#>

NEWBLOCK <#
print something from imported file five times
#>

SOMEBLOCK <#
print something from imported file once
#>

MAINBLOCK <#
exec SOMEBLOCK
exec NEWBLOCK,5
#>

something from imported file once
something from imported file five times
something from imported file five times
something from imported file five times
something from imported file five times
something from imported file five times

something from imported file once

Output of script 4:
TESTBLOCK <#
print running based on positive result
#>

MAINBLOCK <#
import setresi
SOMEBLOCK TESTBLOCK
VERBLOCK TESTBLOCK
#>

SOMEBLOCK <#
i = 25
a = (2 *i*i)+ 3*2*i +5
setres a
#>

VERBLOCK <# setres 25 #>



running based on positive result
running based on positive result

