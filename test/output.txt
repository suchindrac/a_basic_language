Code and output for variables.bl:
MAINBLOCK <#
import variablesi
exec variablesi.NEWBLOCK
exec variablesi.VERBLOCK
#>

NEWBLOCK <#
print - Creating alink as leftside <-> rightside
alink: leftside <-> rightside
print - Creating blink as 1 <-> something
blink: 1 <-> something
print - Creating clink as alink <-> blink
clink: alink <-> blink
print - Printing link details
print clink is {clink}
print clink of alink is clink[alink]
print blink of 1 is blink[1]
print - Changing blink
blink[1] = more
print - Printing blink
print blink of 1 is blink[1]
print Changing blink from right side
blink[more] = 5
print - Printing blink
print blink of more is blink[more]
print - Creating expression link
alinke: left <-> (3+  4) *5
print - Printing expression link
print {alinke}
print - Changing expression link
alinke[left] = (5  +8)*  8
print - Printing expression link
print {alinke}
print - Appending to link
alinke[right] = more
print - Printing the link
print {alinke}
print - Appending to link using plus equal
alinke += new
print - Printing the link
print {alinke}
print - Creating an expression variable
avar = (3 +4) *5
print - Printing the variable
print avar is {avar}
print - Creating an integer variable
bvar = 25
print - Printing the variable
print bvar is {bvar}
print - Equating one variable to another
cvar = avar
print - Printing equated variable
print cvar is {cvar}
print - Creating a string variable
dvar = something
print - Printing the string variable
print dvar is {dvar}
print - Equating a variable to a string variable
evar = dvar
print - Printing equated variable
print evar is {evar}
print - Printing a number
print 25
print - Printing non existing variable
print notexistingvar
print - Variable arithmetic
a = 25
b = 50
c = a + b*25
print Value of c is {c}
#>

SOMEBLOCK <#
print From within SOMEBLOCK
#>

VERBLOCK <# print Single line block output #>
None
- Creating alink as leftside <-> rightside
- Creating blink as 1 <-> something
- Creating clink as alink <-> blink
- Printing link details
clink is leftside <-> rightside,  <-> 1 <-> something, , 
clink of alink is 1 <-> something, 
blink of 1 is something
- Changing blink
- Printing blink
blink of 1 is more
Changing blink from right side
- Printing blink
blink of more is 5
- Creating expression link
- Printing expression link
left <-> 35, 
- Changing expression link
- Printing expression link
left <-> 104, 
- Appending to link
- Printing the link
left <-> 104, right <-> more, 
- Appending to link using plus equal
- Printing the link
left <-> 104, right <-> more, 0 <-> new, 
- Creating an expression variable
- Printing the variable
avar is 35
- Creating an integer variable
- Printing the variable
bvar is 25
- Equating one variable to another
- Printing equated variable
cvar is 35
- Creating a string variable
- Printing the string variable
dvar is something
- Equating a variable to a string variable
- Printing equated variable
evar is something
- Printing a number
25
- Printing non existing variable
notexistingvar
- Variable arithmetic
Value of c is 1275
Single line block output
None
Code and output for variablesmb.bl:
MAINBLOCK <#
print - Creating alink as leftside <-> rightside
alink: leftside <-> rightside
print - Creating blink as 1 <-> something
blink: 1 <-> something
print - Creating clink as alink <-> blink
clink: alink <-> blink
print - Printing link details
print clink is {clink}
print clink of alink is clink[alink]
print blink of 1 is blink[1]
print - Changing blink
blink[1] = more
print - Printing blink
print blink of 1 is blink[1]
print Changing blink from right side
blink[more] = 5
print - Printing blink
print blink of more is blink[more]
print - Creating expression link
alinke: left <-> (3+  4) *5
print - Printing expression link
print {alinke}
print - Changing expression link
alinke[left] = (5  +8)*  8
print - Printing expression link
print {alinke}
print - Appending to link
alinke[right] = more
print - Printing the link
print {alinke}
print - Appending to link using plus equal
alinke += new
print - Printing the link
print {alinke}
print - Creating an expression variable
avar = (3 +4) *5
print - Printing the variable
print avar is {avar}
print - Creating an integer variable
bvar = 25
print - Printing the variable
print bvar is {bvar}
print - Equating one variable to another
cvar = avar
print - Printing equated variable
print cvar is {cvar}
print - Creating a string variable
dvar = something
print - Printing the string variable
print dvar is {dvar}
print - Equating a variable to a string variable
evar = dvar
print - Printing equated variable
print evar is {evar}
print - Printing a number
print 25
print - Printing non existing variable
print notexistingvar
print - Variable arithmetic
a = 25
b = 50
c = a + b*25
print Value of c is {c}
#>

- Creating alink as leftside <-> rightside
- Creating blink as 1 <-> something
- Creating clink as alink <-> blink
- Printing link details
clink is leftside <-> rightside,  <-> 1 <-> something, , 
clink of alink is 1 <-> something, 
blink of 1 is something
- Changing blink
- Printing blink
blink of 1 is more
Changing blink from right side
- Printing blink
blink of more is 5
- Creating expression link
- Printing expression link
left <-> 35, 
- Changing expression link
- Printing expression link
left <-> 104, 
- Appending to link
- Printing the link
left <-> 104, right <-> more, 
- Appending to link using plus equal
- Printing the link
left <-> 104, right <-> more, 0 <-> new, 
- Creating an expression variable
- Printing the variable
avar is 35
- Creating an integer variable
- Printing the variable
bvar is 25
- Equating one variable to another
- Printing equated variable
cvar is 35
- Creating a string variable
- Printing the string variable
dvar is something
- Equating a variable to a string variable
- Printing equated variable
evar is something
- Printing a number
25
- Printing non existing variable
notexistingvar
- Variable arithmetic
Value of c is 1275
None
Code and output for variablesimpmb.bl:
MAINBLOCK <#
import variablesmbi
#>
MAINBLOCK <#
print - Creating alink as leftside <-> rightside
alink: leftside <-> rightside
print - Creating blink as 1 <-> something
blink: 1 <-> something
print - Creating clink as alink <-> blink
clink: alink <-> blink
print - Printing link details
print clink is {clink}
print clink of alink is clink[alink]
print blink of 1 is blink[1]
print - Changing blink
blink[1] = more
print - Printing blink
print blink of 1 is blink[1]
print Changing blink from right side
blink[more] = 5
print - Printing blink
print blink of more is blink[more]
print - Creating expression link
alinke: left <-> (3+  4) *5
print - Printing expression link
print {alinke}
print - Changing expression link
alinke[left] = (5  +8)*  8
print - Printing expression link
print {alinke}
print - Appending to link
alinke[right] = more
print - Printing the link
print {alinke}
print - Appending to link using plus equal
alinke += new
print - Printing the link
print {alinke}
print - Creating an expression variable
avar = (3 +4) *5
print - Printing the variable
print avar is {avar}
print - Creating an integer variable
bvar = 25
print - Printing the variable
print bvar is {bvar}
print - Equating one variable to another
cvar = avar
print - Printing equated variable
print cvar is {cvar}
print - Creating a string variable
dvar = something
print - Printing the string variable
print dvar is {dvar}
print - Equating a variable to a string variable
evar = dvar
print - Printing equated variable
print evar is {evar}
print - Printing a number
print 25
print - Printing non existing variable
print notexistingvar
print - Variable arithmetic
a = 25
b = 50
c = a + b*25
print Value of c is {c}
#>

- Creating alink as leftside <-> rightside
- Creating blink as 1 <-> something
- Creating clink as alink <-> blink
- Printing link details
clink is leftside <-> rightside,  <-> 1 <-> something, , 
clink of alink is 1 <-> something, 
blink of 1 is something
- Changing blink
- Printing blink
blink of 1 is more
Changing blink from right side
- Printing blink
blink of more is 5
- Creating expression link
- Printing expression link
left <-> 35, 
- Changing expression link
- Printing expression link
left <-> 104, 
- Appending to link
- Printing the link
left <-> 104, right <-> more, 
- Appending to link using plus equal
- Printing the link
left <-> 104, right <-> more, 0 <-> new, 
- Creating an expression variable
- Printing the variable
avar is 35
- Creating an integer variable
- Printing the variable
bvar is 25
- Equating one variable to another
- Printing equated variable
cvar is 35
- Creating a string variable
- Printing the string variable
dvar is something
- Equating a variable to a string variable
- Printing equated variable
evar is something
- Printing a number
25
- Printing non existing variable
notexistingvar
- Variable arithmetic
Value of c is 1275
None
None
Code and output for block.bl:
NEWBLK <#
print - Creating a link inside a block 
alink: newword <-> 1
print - Printing the link created
print {alink}
print - Creating a variable and printing it
a = 25
print a is {a}
print - Just printing a letter
print a
#>

MAINBLOCK <#
exec NEWBLK
print - Importing a module
import blocki
exec blocki.callblock
#>

- Creating a link inside a block
- Printing the link created
newword <-> 1, 
- Creating a variable and printing it
a is 25
- Just printing a letter
a
- Importing a module
IBLOCK <#
print - Creating link inside imported block
alink: newvar <-> 1
print - Printing link in imported block
print {alink}
print - Creating a variable in imported block
avar = 23 *22* (9-5)
print - Printing the variable created in imported block
print {avar}
#>

callblock <#
print - Calling from blocki.callblock
exec IBLOCK
#>

MAINBLOCK <#
print - Calling from blocki.MAINBLOCK
exec IBLOCK
#>

- Calling from blocki.MAINBLOCK
- Creating link inside imported block
- Printing link in imported block
newvar <-> 1, 
- Creating a variable in imported block
- Printing the variable created in imported block
2024
None
- Calling from blocki.callblock
- Creating link inside imported block
- Printing link in imported block
newvar <-> 1, 
- Creating a variable in imported block
- Printing the variable created in imported block
2024
None
Code and output for import.bl:
runimpblk <#
print - Inside import.runimpblk
print - Importing module named imported
import imported
print - Calling imported.iblock
exec imported.iblock
#>

MAINBLOCK <#
print - Inside import.MAINBLOCK
print - Declaring local variable avar
avar = 35
print - Printing local variable avar
print avar is {avar}
print - Calling import.runimpblk
exec runimpblk
print - Calling imported.varchgblk
exec imported.varchgblk
print - Printing local variable again
print avar is {avar}
print - Changing value of imported.avar
imported.avar = (3 *imported.avar)*(4+ 2*imported.avar)
print - Printing both local and imported variables
print Value of avar is {avar}
print Value of imported.avar is {imported.avar}
print - Arithmetic using imported variables
cvar = 2 * imported.avar + imported.bvar + 10
print Value of cvar is {cvar}
print Value of imported.cvar is {imported.cvar}
print - Executing imported.PRTBLOCK 5 times from import.MAINBLOCK
exec imported.PRTBLOCK,5
print - Changing variables in imported module and printing them
exec imported.varchgblknew
print - Printing local and imported variables
print cvar is {cvar}
print imported.cvar is {imported.cvar}
#>

- Inside import.MAINBLOCK
- Declaring local variable avar
- Printing local variable avar
avar is 35
- Calling import.runimpblk
- Inside import.runimpblk
- Importing module named imported
iblock <#
print - In imported.iblock
print - Creating a link variable
alink: newval <-> 123
print - Printing a link variable
print {alink}
#>

varchgblk <#
print - Changing avar
avar = 10
print - Creating bvar
bvar = 15
print - Creating alink
alink: impmod <-> val
print - Printing variables from imported file
print Value of avar is {avar}
print Value of alink is {alink}
#>

PRTBLOCK <#
print Inside PRTBLOCK
#>

varchgblknew <#
avar = 15
print avar is {avar}
cvar = 2 * avar * avar + bvar + 10
print cvar is {cvar}
#>

MAINBLOCK <#
print Inside imported.MAINBLOCK
print - Defining imported.avar
avar = 88
print - Printing imported.avar
print avar is {avar}
print - Defining imported.bvar
bvar = 82
print - Printing imported.bvar
print bvar is {bvar}
print Calling imported.PRTBLOCK 5 times
exec PRTBLOCK,5
#>

Inside imported.MAINBLOCK
- Defining imported.avar
- Printing imported.avar
avar is 88
- Defining imported.bvar
- Printing imported.bvar
bvar is 82
Calling imported.PRTBLOCK 5 times
Inside PRTBLOCK
Inside PRTBLOCK
Inside PRTBLOCK
Inside PRTBLOCK
Inside PRTBLOCK
None
- Calling imported.iblock
- In imported.iblock
- Creating a link variable
- Printing a link variable
newval <-> 123, 
- Calling imported.varchgblk
- Changing avar
- Creating bvar
- Creating alink
- Printing variables from imported file
Value of avar is 10
Value of alink is impmod <-> val, 
- Printing local variable again
avar is 10
- Changing value of imported.avar
- Printing both local and imported variables
Value of avar is 10
Value of imported.avar is 47520
- Arithmetic using imported variables
Value of cvar is 95132
Value of imported.cvar is __NOT_FOUND__
- Executing imported.PRTBLOCK 5 times from import.MAINBLOCK
Inside PRTBLOCK
Inside PRTBLOCK
Inside PRTBLOCK
Inside PRTBLOCK
Inside PRTBLOCK
- Changing variables in imported module and printing them
avar is 15
cvar is 475
- Printing local and imported variables
cvar is 475
imported.cvar is __NOT_FOUND__
None
Code and output for loops.bl:
TESTBLOCK <#
print Hi from inside the block that is run
a = a + 1
#>

WHILEBLOCK <#
exec TESTBLOCK
#>

MAINBLOCK <#
print - Testing setres command
b = 10
a = 1
print - Importing another module
import loopsi
print - Running block from imported file as if condition
loopsi.SOMEBLOCK TESTBLOCK
print - Running single line block from imported file as if condition
loopsi.SLBLOCK TESTBLOCK
result = b - a
print - Running while loop result variable number of times
exec WHILEBLOCK,result
print - Defining block in block
BLOCKINBLOCK <# print hello world #>
print - Running block in block 5 times:
exec BLOCKINBLOCK,5
print - Running variable incrementing block
exec loopsi.INCBLOCK,10
print - Printing the value of variable after incrementing
print a is {a}
print - Printing content of a non existent variable
print a is {c}
#>

- Testing setres command
- Importing another module
SOMEBLOCK <#
print Setting values
i = 25
a = 3
print Running setres command
setres a
#>

SLBLOCK <# setres 25 #>

INCBLOCK <# a = a + 1 #>

None
- Running block from imported file as if condition
- Running single line block from imported file as if condition
- Running while loop result variable number of times
Hi from inside the block that is run
Hi from inside the block that is run
Hi from inside the block that is run
Hi from inside the block that is run
Hi from inside the block that is run
Hi from inside the block that is run
Hi from inside the block that is run
Hi from inside the block that is run
Hi from inside the block that is run
- Defining block in block
- Running block in block 5 times:
hello world
hello world
hello world
hello world
hello world
- Running variable incrementing block
- Printing the value of variable after incrementing
a is 20
- Printing content of a non existent variable
a is False
None
Code and output for prnblk.bl:
MAINBLOCK <#
print - Creating and printing a variable within MAINBLOCK
a = 10
print a is {a} from MAINBLOCK
#>

- Creating and printing a variable within MAINBLOCK
a is 10 from MAINBLOCK
None
Code and output for funcinput.bl:
func <#
val = getres ival
print val is {val}
#>

mainblock <#
ival = 10
setres ival
exec func
#>

10
val is 10
None
Code and output for conds.bl:
gblock <#
print Value greater than or equal to 1890
#>

lblock <#
print Value lesser than 1890
#>

etblock <#
print Evaluating to true
#>

efblock <#
print Evaluating to false
#>

condtest <#
a = 5
runblock <# exec gblock,5 #>

print - Doing paranthesis evaluation of condition
parenblock <# print hello world after paren eval #>

(a eq 5) ? etblock : none
print - Doing normal evaluation of condition
a eq 5 ? etblock : none
print - Evaluating and running local block
a eq 5 ? runblock : none
print - Evaluating equation
a = 10
a eq 5 ? none : dvar = 35
print dvar is {dvar}
#>

evalblock <#
trueblock <# setres 1 #>
falseblock <# setres 0 #>
print - Evaluating block
trueblock ? evar = 35 : none
print evar is {evar}
print - Evaluating false for block
falseblock ? none : efblock
#>

MAINBLOCK <#
exec condtest
exec evalblock
import condsi
print - Testing a variable in imported block, and running a local block
condsi.a ge 1890 ? gblock : lblock
print - Running expression on evaluating imported block variable
condsi.a ge 1890 ? val = 1 : val = 0
print val is {val}
#>

- Doing paranthesis evaluation of condition
Evaluating to true
- Doing normal evaluation of condition
Evaluating to true
- Evaluating and running local block
Value greater than or equal to 1890
Value greater than or equal to 1890
Value greater than or equal to 1890
Value greater than or equal to 1890
Value greater than or equal to 1890
- Evaluating equation
dvar is 35
- Evaluating block
evar is 35
- Evaluating false for block
Evaluating to false
iblock <#
print something from imported block
#>

mainblock <#
a = 35 * (49+5)
print - Evaluating and running block
a gt 500 ? iblock : none
#>

- Evaluating and running block
something from imported block
None
- Testing a variable in imported block, and running a local block
Value greater than or equal to 1890
- Running expression on evaluating imported block variable
val is 1
None
